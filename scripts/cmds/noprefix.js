const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

module.exports = {
  config: {
    name: "noprefix",
    version: "3.0",
    author: "A Dil",
    countDown: 5,
    role: 0,
    description: {
      en: "No prefix audio/video responses (from GitHub).",
    },
    shortDescription: "no prefix",
    longDescription:
      "Send anime-style reactions in audio or video form. Supports .mp3 and .mp4 files hosted on GitHub. Type 'list' to view available items.",
    category: "no prefix",
  },

  onStart: async function () {},

  onChat: async function ({ event, message, api }) {
    if (!event.body) return;
    const word = event.body.toLowerCase();

    // üü© Base GitHub URL
    const baseUrl =
      "https://raw.githubusercontent.com/Adil2641/Adil-Resources/main/no-prefix-cmd/";

    // üéµ / üé¨ Media list
    const media = {
      ara: { file: "ara.mp3", text: "„Äå ùêÄùê´ùêö ùêöùê´ùêöüòú „Äç", react: "üòú" },
      yamete: { file: "yamete.mp3", text: "„Äå ùêòùêöùê¶ùêûùê≠ùêû ùê§ùêÆùêùùêöùê¨ùêöùê¢üíãüòõ „Äç", react: "üòõ" },
      haha: { file: "haha.mp3", text: "„Äå Na Has Hai muji „Äç", react: "üòí" },
      bankai: { file: "bankai.mp3", text: "„Äå ùêÅùêöùêßùê§ùêöùê¢‚õ©Ô∏è „Äç", react: "üòà" },
      yowaimo: { file: "yowaimo.mp3", text: "„Äå ùêòùê®ùê∞ùêöùê¢ùê¶ùê®ü§û „Äç", react: "ü§û" },
      umai: { file: "umai.mp3", text: "„Äå ùêîùê¶ùêöùê¢üò§üò§ „Äç", react: "üê∏" },
      onichan: { file: "onichan.mp3", text: "„Äå üçíùêéùêßùê¢ùêúùê°ùêöùêßüçí „Äç", react: "üçí" },
      itachi: { file: "itachi.mp3", text: "„Äå ùêàùê≠ùêöùêúùê°ùê¢üê¶‚Äç‚¨õ „Äç", react: "üê¶‚Äç‚¨õ" },
      uzumaki: { file: "uzumaki.mp3", text: "„Äå ùêîùê≥ùêÆùê¶ùêöùê§ùê¢ü¶ä „Äç", react: "ü¶ä" },
      dattebayo: { file: "dattebayo.mp3", text: "„Äå ùêÉùêöùê≠ùê≠ùêûùêõùêöùê≤ùê®üç• „Äç", react: "üç•" },
      rasengan: { file: "rasengan.mp3", text: "„Äå ùêëùêöùê¨ùêûùêßùê†ùêöùêßüåÄ „Äç", react: "üåÄ" },
      naruto: { file: "naruto.mp3", text: "„Äå üçúùêçùêöùê´ùêÆùê≠ùê®üçú „Äç", react: "üçú" },
      ahh: { file: "ahh.mp3", text: "„Äå ùóîùóµùóµü•µ „Äç", react: "ü•µ" },
      wow: { file: "wow.mp3", text: "„Äå ùó™ùóºùòÑüò± „Äç", react: "üò±" },
      titan: { file: "titan.mp3", text: "„Äå ùóßùó∂ùòÅùóÆùóªüóø „Äç", react: "üóø" },
      sukuna: { file: "sukuna.mp3", text: "„Äå üíÄùó¶ùòÇùó∏ùòÇùóªùóÆ‚õ©Ô∏è „Äç", react: "üíÄ" },
      punch: { file: "punch.mp3", text: "„Äå üëäùêèùêÆùêßùêúùê°üëä „Äç", react: "üëä" },
      jujutsu: { file: "jujutsu.mp3", text: "„Äå ü§ûüèªùêâùêÆùê£ùêÆùê≠ùê¨ùêÆü§ûüèª „Äç", react: "ü§ûüèª" },

      // üé¨ Makima ‚Äî random video selection
      makima: {
        files: ["makima.mp4", "makima-2.mp4", "makima-3.mp4"],
        text: "„Äå üíãùêåùêöùê§ùê¢ùê¶ùêöüíÑ „Äç",
        react: "üíã",
      },
    };

    // üìã List command
    if (word === "list") {
      const listMsg =
        "üìåùó°ùóº ùóΩùóøùó≤ùó≥ùó∂ùòÖ ùó∫ùó≤ùó±ùó∂ùóÆ ùóπùó∂ùòÄùòÅüìù:\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n" +
        Object.keys(media)
          .map(
            (k, i) =>
              `${i + 1}. ${k} (${
                media[k].file?.endsWith(".mp4") || media[k].files ? "üé¨" : "üéµ"
              })`
          )
          .join("\n");
      await message.reply(listMsg);
      await api.setMessageReaction("üìã", event.messageID);
      return;
    }

    const item = media[word];
    if (!item) return;

    try {
      // üé≤ Pick random file if multiple
      const fileName = item.files
        ? item.files[Math.floor(Math.random() * item.files.length)]
        : item.file;

      const fileUrl = baseUrl + fileName;
      const fileExt = path.extname(fileName).toLowerCase();
      const tempPath = path.join(__dirname, `cache_${Date.now()}${fileExt}`);

      // ‚úÖ Check if file exists on GitHub
      const headCheck = await axios.head(fileUrl).catch(() => null);
      if (!headCheck || headCheck.status !== 200) {
        return message.reply(`‚ö†Ô∏è Media file not found on GitHub:\n${fileName}`);
      }

      // üì• Download file
      const response = await axios.get(fileUrl, { responseType: "arraybuffer" });
      await fs.writeFile(tempPath, response.data);

      // üé¨ Detect video vs audio
      const isVideo = fileExt === ".mp4";
      await message.reply({
        body: item.text,
        attachment: fs.createReadStream(tempPath),
      });

      // üí¨ Add reaction
      await api.setMessageReaction(item.react, event.messageID);

      // üßπ Cleanup temp file
      setTimeout(() => fs.unlink(tempPath).catch(() => {}), 15000);
    } catch (err) {
      console.error("‚ùå Error loading media:", err.message);
      message.reply("‚ö†Ô∏è Could not load or send playable media!");
    }
  },
};
